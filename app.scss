$primary-color: orange;


/****** Data Types ********/

// null
$i-am-null: null;

// Boolean
$i-am-false: false;
$i-am-true: true;

// Number
$number: 36px;

// Strings
$name: 'Abdul Wahab';
$name-together: 'Abdul ' + 'Wahab';

// Color
$bg-color: darken(white, 95%); // Builtin Function
$venus: #556644;

/****** End Data Types ********/


/******* Operators ************/

h1{
  font-size: 14px + 2;
}
h2 {
  font-size: 18px - 2;
}
h3 {
  font-size: (60/2);
  opacity: random(4) / 5;
  padding-right: 2px / 4px + 3px;
}
h4 {
  width: 3px * 5 + 5px;
  width: 3 * (5px + 5px);
  width: 3px + (6px / 2) * 3;
}

/* Equality Operator ->    ==, != */

@mixin font-fl($font) {
  &:after {
    @if (type-of($font) == string) {
      content: ' My font is #{$font}.';
    }
    @elseif (type-of($font) != false) {
      content: ' My font is a number.';
    }
    @else {
      content: ' Sorry, the argument #{$font} is a #{type-of($font)}.';
    }
  }
}

h2 {
  @include font-fl(sans-serif);
}
h3 {
  @include font-fl(7);
}

/* Comparison Operator ->     ==, <=, >=, != */
$padding: 50px;
h2 {
  @if ($padding <= 20) {
    padding: $padding;
  }
  @else {
    padding: $padding / 2;
  }
}

/* Logical Operator ->    and, or */
$var1: "foo";
$var2: "bar";

@mixin varcheck(){
    &:after {
      @if $var1 == "foo" and $var2 == "br" {
        content: 'Var1 and Var2 are true';
      }
      @else {
        content: 'Both or One of these is false';
      }
    }
}
h5 {
  @include varcheck();
}


/* String Operations */
$first-name: 'Abdul';
$last-name: 'Wahab';

@mixin string-concat() {
  &:after {
    content: "Your name is: " + $first-name + " " + $last-name;
  }
}

h6 {
  @include string-concat();
}

/* Color Operations */
h1 {
  // Alpha valuse must be same for both operands.
  color: rgba(70, 132, 153, 1) + rgba(32, 68, 121, 1);
}
h2 {
  // must be in captial letters
  color: #DC143C + #B0171F;
}

/******* End Operators *******/


/******** Parent Child Selector ->    &   *******/
.btn {
  &:hover { color: white;}
  &:visited { color: white;}
  &:active { color: white;}
}

.btn {
  & > span { color : white; }
  & + span { color : white; }
  & ~ span { color : white; }
}

.btn {
  &-primary { color : white; }
  &-secondary { color : white; }
}

.btn {
  body.page & { color : white; }
}

/******* End Parent Child Selector ****/

/********* Interpolation ->    ******/

@mixin font-fl($font) {
  &:after {
    @if (type-of($font) == string) {
      content: ' My font is #{$font}.';
    }
    @elseif (type-of($font) != false) {
      content: ' My font is a number.';
    }
    @else {
      content: ' Sorry, the argument #{$font} is a #{type-of($font)}.';
    }
  }
}

h2 {
  @include font-fl(sans-serif);
}

/******** End Interpolation ****/

/******* Partials ******/
// it's not possible to nest imports in mixins and control directives

@import 'partials/_reset';

/****** End Partials ********/


/******* Mixins ******/
// Group of CSS declarations that you want to resue for your site

@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}

@mixin compound {
  @include highlighted-background;
  @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }

p {
  @include large-text;
}

h6 {
  @include compound;
}

// Mixin with Arguements
@mixin link ($link, $visit, $hover, $active) {
  a {
    color: $link;

    &:visited {
      color: $visit;
    }

    &:active {
      color: $active;
    }

    &:hover {
      color: $hover;
    }
  }
}

.main {
  @include link(blue, green, red, orange);
}

@mixin sexy-border ($color, $width: 1in) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}

p {
  @include sexy-border(blue);
}
h6 {
  @include sexy-border (blue, 2in);
}

p {
  @include sexy-border ($color: blue);
}
h6 {
  @include sexy-border ($color: blue, $width: 2in);
}

// Unkown number of Arguments VarArgs
@mixin box-shadow ($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}
.shadows {
  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}


/****** End Mixins ******/


/****** Inheritance / Extend ********/

.message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}
.success {
  @extend .message;
  border-color: green;
}
.warning {
  @extend .message;
  border-color: yellow;
}
.error {
  @extend .message;
  border-color: red;
}

/* Multiple Extends */
.error {
  border: 1px #f00;
  background-color: #fdd;
}
.attention {
  font-size: 3em;
  background-color: #ff0;
}
.seriuosError {
  @extend .error;
  @extend .attention;
  border-width: 3px;
}

/* Chaining Extends */
.criticalError {
  @extend .seriuosError;
  position: fixed;
  top: 10%;
  bottom: 10%;
  left: 10%;
  right: 10%;
}

/****** End Inheritance ********/

/*** Placeholder Classes ***/
// This will never get compiled into CSS files
%foo {
  color: red;
}
.bar {
  @extend %foo;
  background: blue;
}
.baz {
  @extend %foo;
  background: yellow;
}

/*** End Placeholder Classes ***/

/*** DIfference b/w Mixin and Extend ***/

/** Mixin code isn't DRY **/
/** It's recommended to use Mixin with arguments only**/
@mixin hide-text {
  text-indent: -9999px;
  overflow: hidden;
}
.foo {
  @include hide-text;
}
.bar {
  @include hide-text;
}
.baz {
  @include hide-text;
}
/** Placeholder class code is DRY **/
%hidden-text {
  text-indent: -9999px;
  overflow: hidden;
}
.foo {
  @extend %hidden-text;
}
.bar {
  @extend %hidden-text;
}
.baz {
  @extend %hidden-text;
}

/*** End DIfference b/w Mixin and Extend ***/

/*** Nesting ***/
/* Useful when you want to avoid the repition of parent selector */

a {
  font-weight: bold;
  text-decoration: none;
  &:hover { text-decoration: none; }
  body.firefox & { font-weight: normal; }
}

/* Nested Properties */
.funky {
  font: {
    family: fantasy;
    size: 3em;
    weight: bold;
  }
}
/** End Nesting **/


/**** Lists ****/

$background-color-list: #4BC2A5 #606F40 #6648CA;
$border-colors-list: #ff9900 #77ff66 #73C227;
$colors-list: #111 #222 #333;

// Three comma separated elements
$font-list: 'Raleway', 'Dosis', 'Lato';

// Three space separated elements
$pad-list: 10px 8px 12px;

// Multilist with two lists
$multi-list: 'Roboto', 15px 1.3em;

/* Nth function in lists */
@each $current-color in $colors-list {
  $i: index($colors-list, $current-color);
  .stuff-#{$i} {
    color: $current-color;
    background-color: nth($background-color-list, $i);
    border: 1px solid nth($border-colors-list, $i);
  }
}
h1 {
  background-color: nth($background-color-list, 3);
}

/*** End Lists ****/


/*** Maps ***/
// Key/value pairs. Must be in parenthesis. They have to be comma separated.
// Key and Value can be any Sass object.

$primary-colors: (
  "red": "#ff0000",
  "green": "#00ff00",
  "blue": "#0000ff"
);
@each $color-name, $color-code in $primary-colors {
  .color-#{$color-name} {
    background-color: $color-code;
  }
}

/*** End Maps ***/



body {
  color: $primary-color;
  font-size: $number;
  background-color: $bg-color;
}
body::after {
  content: $name-together;
  background-color: $venus;
}
